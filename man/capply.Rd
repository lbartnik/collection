% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/capply.R
\name{capply}
\alias{capply}
\alias{capply_}
\title{Apply a funtion to each object in a colletion.}
\usage{
capply(col, fun, ..., execute = TRUE)

capply_(col, fun, ..., execute = FALSE)
}
\arguments{
\item{col}{A \code{\link{collection}} object.}

\item{fun}{A \code{function} object.}

\item{...}{Extra arguments for \code{fun}.}

\item{execute}{Whether to execute the call immediately (\code{TRUE})
or return an \emph{execution task} object (\code{FALSE}).}
}
\description{
Both \code{capply} and \code{capply_} both apply a function
\code{fun} on each object in collection \code{col}. \code{capply} is
designed for interactive use while \code{capply_} gives more control
over the exact way the call is executed.
}
\details{
\code{capply} by default executes the task immediately
\code{execute = TRUE}) and returns execution results as a regular
\code{list}.

\code{capply_} by default returns an \emph{execution task} object
(\code{execute = FALSE}) which then can be passed to an explicit
\emph{execution} method. Combined with the \code{\link{store}} method
it enables a scenario where results are never aggregated in memory
as a \code{list}.

\code{capply} will additionally produce messages that instruct
the interactive user how to access the result of the call.
}

